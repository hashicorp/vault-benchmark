name: build

# We now default to running this workflow on every push to every branch.
# This provides fast feedback when build issues occur, so they can be
# fixed prior to being merged to the main branch.
#
# If you want to opt out of this, and only run the build on certain branches
# please refer to the documentation on branch filtering here:
#
#   https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushbranchestagsbranches-ignoretags-ignore
#
on: [workflow_dispatch, push]

env:
  PKG_NAME: "vault-benchmark"
  METADATA: oss

jobs:
  get-go-version:
    name: "Determine Go toolchain version"
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #https://github.com/actions/checkout/releases/tag/v3.1.0
      - name: Determine Go version
        id: get-go-version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> $GITHUB_OUTPUT

  set-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.set-product-version.outputs.product-version }}
      product-base-version: ${{ steps.set-product-version.outputs.base-product-version }}
      product-prerelease-version: ${{ steps.set-product-version.outputs.prerelease-product-version }}
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #https://github.com/actions/checkout/releases/tag/v3.1.0
      - name: Set Product version
        id: set-product-version
        uses: hashicorp/actions-set-product-version@v1

  generate-metadata-file:
    needs: set-product-version
    runs-on: ubuntu-latest
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: "Checkout directory"
        uses: actions/checkout@v3
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@v1
        with:
          version: ${{ needs.set-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}
          repositoryOwner: "hashicorp"
      - uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb #https://github.com/actions/upload-artifact/releases/tag/v3.1.1
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}

  build-linux:
    needs:
      - get-go-version
      - set-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: ["arm", "arm64", "386", "amd64"]

      fail-fast: true

    name: Go ${{ needs.get-go-version.outputs.go-version }} ${{ matrix.goos }} ${{ matrix.goarch }} build

    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b #https://github.com/actions/checkout/releases/tag/v3.2.0

      - uses: hashicorp/actions-go-build@v0.1.7
        env:
          BASE_VERSION: ${{ needs.set-product-version.outputs.product-base-version }}
          PRERELEASE_VERSION: ${{ needs.set-product-version.outputs.product-prerelease-version}}
          METADATA_VERSION: ${{ env.METADATA }}
        with:
          product_name: ${{ env.PKG_NAME }}
          product_version: ${{ needs.set-product-version.outputs.product-version }}
          go_version: ${{ needs.get-go-version.outputs.go-version }}
          os: ${{ matrix.goos }}
          arch: ${{ matrix.goarch }}
          reproducible: report
          instructions: |
            make build
      - name: Package
        if: ${{ matrix.goos == 'linux' }}
        uses: hashicorp/actions-packaging-linux@v1
        with:
          name: ${{ github.event.repository.name }}
          description: "vault-benchmark is a template repo for oss products."
          arch: ${{ matrix.goarch }}
          version: ${{ needs.set-product-version.outputs.product-version }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/vault-benchmark"
          license: "MPL-2.0"
          binary: "dist/${{ env.PKG_NAME }}"
          deb_depends: "openssl"
          rpm_depends: "openssl"

      - name: Set Package Names
        if: ${{ matrix.goos == 'linux' }}
        run: |
          echo "RPM_PACKAGE=$(basename out/*.rpm)" >> $GITHUB_ENV
          echo "DEB_PACKAGE=$(basename out/*.deb)" >> $GITHUB_ENV
      - uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb #https://github.com/actions/upload-artifact/releases/tag/v3.1.1
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ env.RPM_PACKAGE }}
          path: out/${{ env.RPM_PACKAGE }}

      - uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb #https://github.com/actions/upload-artifact/releases/tag/v3.1.1
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ env.DEB_PACKAGE }}
          path: out/${{ env.DEB_PACKAGE }}

  build-docker:
    name: Docker ${{ matrix.arch }} build
    needs:
      - set-product-version
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, arm64, 386, amd64]
    env:
      repo: ${{github.event.repository.name}}
    steps:
      - uses: actions/checkout@v3
      - name: Set version with metadata
        run: |
          echo "version=${{needs.set-product-version.outputs.product-version}}+${{ env.VERSION_METADATA }}" >> "$GITHUB_ENV"
      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{ env.version }}
          target: release-default
          arch: ${{matrix.arch}}
          zip_artifact_name: ${{ env.PKG_NAME }}_${{ env.version }}_linux_${{ matrix.arch }}.zip
          tags: |
            docker.io/hashicorp/${{env.PKG_NAME}}:${{ env.version }}
            public.ecr.aws/hashicorp/${{ env.PKG_NAME }}:${{ env.version }}
          dev_tags: |
            hashicorppreview/${{env.PKG_NAME}}:${{ env.version }}
            docker.io/hashicorppreview/${{env.PKG_NAME}}:${{ env.version }}-${{github.sha}}